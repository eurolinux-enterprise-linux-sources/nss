diff -up nss/lib/ssl/ssl3con.c.disable_pss nss/lib/ssl/ssl3con.c
--- nss/lib/ssl/ssl3con.c.disable_pss	2018-02-28 11:57:36.947359221 +0100
+++ nss/lib/ssl/ssl3con.c	2018-02-28 12:32:40.018217713 +0100
@@ -189,9 +189,15 @@ static const SSLSignatureScheme defaultS
     ssl_sig_ecdsa_secp384r1_sha384,
     ssl_sig_ecdsa_secp521r1_sha512,
     ssl_sig_ecdsa_sha1,
+#if 0
+    /* Disable, while we are waiting for an upstream fix to
+     * https://bugzilla.mozilla.org/show_bug.cgi?id=1311950
+     * (NSS does not check if token supports RSA-PSS before using it to sign)
+     **/
     ssl_sig_rsa_pss_rsae_sha256,
     ssl_sig_rsa_pss_rsae_sha384,
     ssl_sig_rsa_pss_rsae_sha512,
+#endif
     ssl_sig_rsa_pkcs1_sha256,
     ssl_sig_rsa_pkcs1_sha384,
     ssl_sig_rsa_pkcs1_sha512,
@@ -4144,9 +4150,16 @@ ssl_IsSupportedSignatureScheme(SSLSignat
         case ssl_sig_rsa_pkcs1_sha256:
         case ssl_sig_rsa_pkcs1_sha384:
         case ssl_sig_rsa_pkcs1_sha512:
+            return PR_TRUE;
+    /* Disable, while we are waiting for an upstream fix to
+     * https://bugzilla.mozilla.org/show_bug.cgi?id=1311950
+     * (NSS does not check if token supports RSA-PSS before using it to sign)
+     **/
         case ssl_sig_rsa_pss_rsae_sha256:
         case ssl_sig_rsa_pss_rsae_sha384:
         case ssl_sig_rsa_pss_rsae_sha512:
+            return PR_FALSE;
+
         case ssl_sig_ecdsa_secp256r1_sha256:
         case ssl_sig_ecdsa_secp384r1_sha384:
         case ssl_sig_ecdsa_secp521r1_sha512:
diff -up nss/lib/ssl/sslcert.c.disable_pss nss/lib/ssl/sslcert.c
--- nss/lib/ssl/sslcert.c.disable_pss	2018-02-27 15:47:47.000000000 +0100
+++ nss/lib/ssl/sslcert.c	2018-02-28 11:57:36.948359198 +0100
@@ -435,8 +435,14 @@ ssl_GetCertificateAuthTypes(CERTCertific
         case SEC_OID_PKCS1_RSA_ENCRYPTION:
             if (cert->keyUsage & KU_DIGITAL_SIGNATURE) {
                 authTypes |= 1 << ssl_auth_rsa_sign;
+#if 0
+    /* Disable, while we are waiting for an upstream fix to
+     * https://bugzilla.mozilla.org/show_bug.cgi?id=1311950
+     * (NSS does not check if token supports RSA-PSS before using it to sign)
+     **/
                 /* This certificate is RSA, assume that it's also PSS. */
                 authTypes |= 1 << ssl_auth_rsa_pss;
+#endif
             }
 
             if (cert->keyUsage & KU_KEY_ENCIPHERMENT) {
@@ -448,9 +454,15 @@ ssl_GetCertificateAuthTypes(CERTCertific
             break;
 
         case SEC_OID_PKCS1_RSA_PSS_SIGNATURE:
+#if 0
+    /* Disable, while we are waiting for an upstream fix to
+     * https://bugzilla.mozilla.org/show_bug.cgi?id=1311950
+     * (NSS does not check if token supports RSA-PSS before using it to sign)
+     **/
             if (cert->keyUsage & KU_DIGITAL_SIGNATURE) {
                 authTypes |= 1 << ssl_auth_rsa_pss;
             }
+#endif
             break;
 
         case SEC_OID_ANSIX9_DSA_SIGNATURE:
