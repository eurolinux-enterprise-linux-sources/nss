diff -up nss/gtests/pk11_gtest/manifest.mn.disable-pss-gtests nss/gtests/pk11_gtest/manifest.mn
--- nss/gtests/pk11_gtest/manifest.mn.disable-pss-gtests	2018-02-28 16:27:01.247098670 +0100
+++ nss/gtests/pk11_gtest/manifest.mn	2018-02-28 16:27:05.834994671 +0100
@@ -14,7 +14,6 @@ CPPSRCS = \
       pk11_pbkdf2_unittest.cc \
       pk11_prf_unittest.cc \
       pk11_prng_unittest.cc \
-      pk11_rsapss_unittest.cc \
       pk11_der_private_key_import_unittest.cc \
       $(NULL)
 
diff -up nss/gtests/ssl_gtest/ssl_auth_unittest.cc.disable-pss-gtests nss/gtests/ssl_gtest/ssl_auth_unittest.cc
--- nss/gtests/ssl_gtest/ssl_auth_unittest.cc.disable-pss-gtests	2018-02-27 15:47:47.000000000 +0100
+++ nss/gtests/ssl_gtest/ssl_auth_unittest.cc	2018-02-28 16:26:09.489271951 +0100
@@ -37,24 +37,6 @@ TEST_P(TlsConnectGeneric, ServerAuthRsaC
   EXPECT_EQ(2UL, chain_length);
 }
 
-TEST_P(TlsConnectGeneric, ServerAuthRsaPssChain) {
-  Reset("rsa_pss_chain");
-  Connect();
-  CheckKeys();
-  size_t chain_length;
-  EXPECT_TRUE(client_->GetPeerChainLength(&chain_length));
-  EXPECT_EQ(2UL, chain_length);
-}
-
-TEST_P(TlsConnectGeneric, ServerAuthRsaCARsaPssChain) {
-  Reset("rsa_ca_rsa_pss_chain");
-  Connect();
-  CheckKeys();
-  size_t chain_length;
-  EXPECT_TRUE(client_->GetPeerChainLength(&chain_length));
-  EXPECT_EQ(2UL, chain_length);
-}
-
 TEST_P(TlsConnectGeneric, ClientAuth) {
   client_->SetupClientAuth();
   server_->RequestClientAuth(true);
@@ -125,7 +107,7 @@ TEST_P(TlsConnectTls12, ServerAuthCheckS
   EXPECT_TRUE(buffer.Read(1, 2, &tmp)) << "read NamedCurve";
   EXPECT_EQ(ssl_grp_ec_curve25519, tmp);
   EXPECT_TRUE(buffer.Read(3, 1, &tmp)) << " read ECPoint";
-  CheckSigScheme(capture_ske, 4 + tmp, client_, ssl_sig_rsa_pss_rsae_sha256,
+  CheckSigScheme(capture_ske, 4 + tmp, client_, ssl_sig_rsa_pkcs1_sha256,
                  1024);
 }
 
@@ -149,7 +131,7 @@ TEST_P(TlsConnectTls12, ClientAuthBigRsa
   server_->RequestClientAuth(true);
   Connect();
   CheckKeys();
-  CheckSigScheme(capture_cert_verify, 0, server_, ssl_sig_rsa_pss_rsae_sha256,
+  CheckSigScheme(capture_cert_verify, 0, server_, ssl_sig_rsa_pkcs1_sha256,
                  2048);
 }
 
@@ -700,8 +682,6 @@ static const SSLExtraServerCertData Serv
     ssl_auth_rsa_decrypt, nullptr, nullptr, nullptr};
 static const SSLExtraServerCertData ServerCertDataRsaPkcs1Sign = {
     ssl_auth_rsa_sign, nullptr, nullptr, nullptr};
-static const SSLExtraServerCertData ServerCertDataRsaPss = {
-    ssl_auth_rsa_pss, nullptr, nullptr, nullptr};
 
 // Test RSA cert with usage=[signature, encipherment].
 TEST_F(TlsAgentStreamTestServer, ConfigureCertRsaPkcs1SignAndKEX) {
@@ -710,15 +690,12 @@ TEST_F(TlsAgentStreamTestServer, Configu
   PRFileDesc* ssl_fd = agent_->ssl_fd();
   EXPECT_TRUE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_decrypt));
   EXPECT_TRUE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_sign));
-  EXPECT_TRUE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_pss));
 
-  // Configuring for only rsa_sign, rsa_pss, or rsa_decrypt should work.
+  // Configuring for only rsa_sign, or rsa_decrypt should work.
   EXPECT_TRUE(agent_->ConfigServerCert(TlsAgent::kServerRsa, false,
                                        &ServerCertDataRsaPkcs1Decrypt));
   EXPECT_TRUE(agent_->ConfigServerCert(TlsAgent::kServerRsa, false,
                                        &ServerCertDataRsaPkcs1Sign));
-  EXPECT_TRUE(agent_->ConfigServerCert(TlsAgent::kServerRsa, false,
-                                       &ServerCertDataRsaPss));
 }
 
 // Test RSA cert with usage=[signature].
@@ -728,17 +705,14 @@ TEST_F(TlsAgentStreamTestServer, Configu
   PRFileDesc* ssl_fd = agent_->ssl_fd();
   EXPECT_FALSE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_decrypt));
   EXPECT_TRUE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_sign));
-  EXPECT_TRUE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_pss));
 
   // Configuring for only rsa_decrypt should fail.
   EXPECT_FALSE(agent_->ConfigServerCert(TlsAgent::kServerRsaSign, false,
                                         &ServerCertDataRsaPkcs1Decrypt));
 
-  // Configuring for only rsa_sign or rsa_pss should work.
+  // Configuring for only rsa_sign should work.
   EXPECT_TRUE(agent_->ConfigServerCert(TlsAgent::kServerRsaSign, false,
                                        &ServerCertDataRsaPkcs1Sign));
-  EXPECT_TRUE(agent_->ConfigServerCert(TlsAgent::kServerRsaSign, false,
-                                       &ServerCertDataRsaPss));
 }
 
 // Test RSA cert with usage=[encipherment].
@@ -748,39 +722,16 @@ TEST_F(TlsAgentStreamTestServer, Configu
   PRFileDesc* ssl_fd = agent_->ssl_fd();
   EXPECT_TRUE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_decrypt));
   EXPECT_FALSE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_sign));
-  EXPECT_FALSE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_pss));
 
-  // Configuring for only rsa_sign or rsa_pss should fail.
+  // Configuring for only rsa_sign should fail.
   EXPECT_FALSE(agent_->ConfigServerCert(TlsAgent::kServerRsaDecrypt, false,
                                         &ServerCertDataRsaPkcs1Sign));
-  EXPECT_FALSE(agent_->ConfigServerCert(TlsAgent::kServerRsaDecrypt, false,
-                                        &ServerCertDataRsaPss));
 
   // Configuring for only rsa_decrypt should work.
   EXPECT_TRUE(agent_->ConfigServerCert(TlsAgent::kServerRsaDecrypt, false,
                                        &ServerCertDataRsaPkcs1Decrypt));
 }
 
-// Test configuring an RSA-PSS cert.
-TEST_F(TlsAgentStreamTestServer, ConfigureCertRsaPss) {
-  Reset(TlsAgent::kServerRsaPss);
-
-  PRFileDesc* ssl_fd = agent_->ssl_fd();
-  EXPECT_FALSE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_decrypt));
-  EXPECT_FALSE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_sign));
-  EXPECT_TRUE(SSLInt_HasCertWithAuthType(ssl_fd, ssl_auth_rsa_pss));
-
-  // Configuring for only rsa_sign or rsa_decrypt should fail.
-  EXPECT_FALSE(agent_->ConfigServerCert(TlsAgent::kServerRsaPss, false,
-                                        &ServerCertDataRsaPkcs1Sign));
-  EXPECT_FALSE(agent_->ConfigServerCert(TlsAgent::kServerRsaPss, false,
-                                        &ServerCertDataRsaPkcs1Decrypt));
-
-  // Configuring for only rsa_pss should work.
-  EXPECT_TRUE(agent_->ConfigServerCert(TlsAgent::kServerRsaPss, false,
-                                       &ServerCertDataRsaPss));
-}
-
 // variant, version, certificate, auth type, signature scheme
 typedef std::tuple<SSLProtocolVariant, uint16_t, std::string, SSLAuthType,
                    SSLSignatureScheme>
@@ -846,7 +797,7 @@ INSTANTIATE_TEST_CASE_P(
         ::testing::Values(TlsAgent::kServerRsaSign),
         ::testing::Values(ssl_auth_rsa_sign),
         ::testing::Values(ssl_sig_rsa_pkcs1_sha256, ssl_sig_rsa_pkcs1_sha384,
-                          ssl_sig_rsa_pkcs1_sha512, ssl_sig_rsa_pss_rsae_sha256,
+                          ssl_sig_rsa_pkcs1_sha512, ssl_sig_rsa_pkcs1_sha256,
                           ssl_sig_rsa_pss_rsae_sha384)));
 // PSS with SHA-512 needs a bigger key to work.
 INSTANTIATE_TEST_CASE_P(
@@ -855,7 +806,7 @@ INSTANTIATE_TEST_CASE_P(
                        TlsConnectTestBase::kTlsV12Plus,
                        ::testing::Values(TlsAgent::kRsa2048),
                        ::testing::Values(ssl_auth_rsa_sign),
-                       ::testing::Values(ssl_sig_rsa_pss_rsae_sha512)));
+                       ::testing::Values(ssl_sig_rsa_pkcs1_sha512)));
 INSTANTIATE_TEST_CASE_P(
     SignatureSchemeRsaSha1, TlsSignatureSchemeConfiguration,
     ::testing::Combine(TlsConnectTestBase::kTlsVariantsAll,
diff -up nss/gtests/ssl_gtest/ssl_ecdh_unittest.cc.disable-pss-gtests nss/gtests/ssl_gtest/ssl_ecdh_unittest.cc
--- nss/gtests/ssl_gtest/ssl_ecdh_unittest.cc.disable-pss-gtests	2018-02-28 16:26:09.486272019 +0100
+++ nss/gtests/ssl_gtest/ssl_ecdh_unittest.cc	2018-02-28 16:26:09.489271951 +0100
@@ -58,7 +58,7 @@ TEST_P(TlsConnectGeneric, ConnectEcdheP3
   server_->ConfigNamedGroups(groups);
   Connect();
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp384r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
 }
 
 // This causes a HelloRetryRequest in TLS 1.3.  Earlier versions don't care.
@@ -70,7 +70,7 @@ TEST_P(TlsConnectGeneric, ConnectEcdheP3
   server_->ConfigNamedGroups(groups);
   Connect();
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp384r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
   EXPECT_EQ(version_ == SSL_LIBRARY_VERSION_TLS_1_3,
             hrr_capture->buffer().len() != 0);
 }
@@ -100,7 +100,7 @@ TEST_P(TlsKeyExchangeTest, P384Priority)
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp384r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
 
   std::vector<SSLNamedGroup> shares = {ssl_grp_ec_secp384r1};
   CheckKEXDetails(groups, shares);
@@ -117,7 +117,7 @@ TEST_P(TlsKeyExchangeTest, DuplicateGrou
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp384r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
 
   std::vector<SSLNamedGroup> shares = {ssl_grp_ec_secp384r1};
   std::vector<SSLNamedGroup> expectedGroups = {ssl_grp_ec_secp384r1,
@@ -135,7 +135,7 @@ TEST_P(TlsKeyExchangeTest, P384PriorityD
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp384r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
 
   if (version_ >= SSL_LIBRARY_VERSION_TLS_1_3) {
     std::vector<SSLNamedGroup> shares = {ssl_grp_ec_secp384r1};
@@ -160,7 +160,7 @@ TEST_P(TlsConnectGenericPre13, P384Prior
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp384r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
 }
 
 TEST_P(TlsConnectGenericPre13, P384PriorityFromModelSocket) {
@@ -176,7 +176,7 @@ TEST_P(TlsConnectGenericPre13, P384Prior
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp384r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
 }
 
 class TlsKeyExchangeGroupCapture : public TlsHandshakeFilter {
@@ -261,7 +261,7 @@ TEST_P(TlsConnectStreamPre13, Configured
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp256r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
   CheckConnected();
 
   // The renegotiation has to use the same preferences as the original session.
@@ -269,7 +269,7 @@ TEST_P(TlsConnectStreamPre13, Configured
   client_->StartRenegotiate();
   Handshake();
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp256r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
 }
 
 TEST_P(TlsConnectGenericPre13, GroupPreferenceServerPriority) {
@@ -289,7 +289,7 @@ TEST_P(TlsConnectGenericPre13, GroupPref
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_curve25519, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
 }
 
 #ifndef NSS_DISABLE_TLS_1_3
@@ -308,7 +308,7 @@ TEST_P(TlsKeyExchangeTest13, Curve25519P
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp256r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
   const std::vector<SSLNamedGroup> shares = {ssl_grp_ec_secp256r1};
   CheckKEXDetails(client_groups, shares);
 }
@@ -328,7 +328,7 @@ TEST_P(TlsKeyExchangeTest13, Curve25519P
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_curve25519, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
   const std::vector<SSLNamedGroup> shares = {ssl_grp_ec_curve25519};
   CheckKEXDetails(client_groups, shares);
 }
@@ -350,7 +350,7 @@ TEST_P(TlsKeyExchangeTest13, EqualPriori
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp256r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
   const std::vector<SSLNamedGroup> shares = {ssl_grp_ec_curve25519};
   CheckKEXDetails(client_groups, shares, ssl_grp_ec_secp256r1);
 }
@@ -372,7 +372,7 @@ TEST_P(TlsKeyExchangeTest13, NotEqualPri
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp256r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
   const std::vector<SSLNamedGroup> shares = {ssl_grp_ec_curve25519};
   CheckKEXDetails(client_groups, shares, ssl_grp_ec_secp256r1);
 }
@@ -394,7 +394,7 @@ TEST_P(TlsKeyExchangeTest13,
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp256r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
   const std::vector<SSLNamedGroup> shares = {ssl_grp_ec_curve25519};
   CheckKEXDetails(client_groups, shares, ssl_grp_ec_secp256r1);
 }
@@ -416,7 +416,7 @@ TEST_P(TlsKeyExchangeTest13,
   Connect();
 
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp256r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
   const std::vector<SSLNamedGroup> shares = {ssl_grp_ec_curve25519};
   CheckKEXDetails(client_groups, shares, ssl_grp_ec_secp256r1);
 }
@@ -478,7 +478,7 @@ TEST_P(TlsKeyExchangeTest13, MultipleCli
 
   // The server would accept 25519 but its preferred group (P256) has to win.
   CheckKeys(ssl_kea_ecdh, ssl_grp_ec_secp256r1, ssl_auth_rsa_sign,
-            ssl_sig_rsa_pss_rsae_sha256);
+            ssl_sig_rsa_pkcs1_sha256);
   const std::vector<SSLNamedGroup> shares = {ssl_grp_ec_curve25519,
                                              ssl_grp_ec_secp256r1};
   CheckKEXDetails(client_groups, shares);
diff -up nss/tests/ssl_gtests/ssl_gtests.sh.disable-pss-gtests nss/tests/ssl_gtests/ssl_gtests.sh
--- nss/tests/ssl_gtests/ssl_gtests.sh.disable-pss-gtests	2018-02-28 16:28:09.141559635 +0100
+++ nss/tests/ssl_gtests/ssl_gtests.sh	2018-02-28 16:28:32.337033947 +0100
@@ -84,7 +84,6 @@ ssl_gtest_certs() {
   make_cert rsa rsa sign kex
   make_cert rsa2048 rsa2048 sign kex
   make_cert rsa_sign rsa sign
-  make_cert rsa_pss rsapss sign
   make_cert rsa_decrypt rsa kex
   make_cert ecdsa256 p256 sign
   make_cert ecdsa384 p384 sign
@@ -92,9 +91,6 @@ ssl_gtest_certs() {
   make_cert ecdh_ecdsa p256 kex
   make_cert rsa_ca rsa_ca ca
   make_cert rsa_chain rsa_chain sign
-  make_cert rsa_pss_ca rsapss_ca ca
-  make_cert rsa_pss_chain rsapss_chain sign
-  make_cert rsa_ca_rsa_pss_chain rsa_ca_rsapss_chain sign
   make_cert ecdh_rsa ecdh_rsa kex
   make_cert dsa dsa sign
 }
