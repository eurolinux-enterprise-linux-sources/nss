diff -up nss/lib/ssl/ssl3con.c.revert-ckm-tls12 nss/lib/ssl/ssl3con.c
--- nss/lib/ssl/ssl3con.c.revert-ckm-tls12	2018-02-28 12:33:14.138452668 +0100
+++ nss/lib/ssl/ssl3con.c	2018-02-28 12:38:15.108704202 +0100
@@ -3306,16 +3306,14 @@ ssl3_ComputeMasterSecretInt(sslSocket *s
     CK_FLAGS keyFlags;
     CK_VERSION pms_version;
     CK_VERSION *pms_version_ptr = NULL;
-    /* master_params may be used as a CK_SSL3_MASTER_KEY_DERIVE_PARAMS */
-    CK_TLS12_MASTER_KEY_DERIVE_PARAMS master_params;
-    unsigned int master_params_len;
+    CK_SSL3_MASTER_KEY_DERIVE_PARAMS master_params;
 
     if (isTLS12) {
-        if (isDH)
-            master_derive = CKM_TLS12_MASTER_KEY_DERIVE_DH;
-        else
-            master_derive = CKM_TLS12_MASTER_KEY_DERIVE;
-        key_derive = CKM_TLS12_KEY_AND_MAC_DERIVE;
+	if(isDH)
+            master_derive = CKM_NSS_TLS_MASTER_KEY_DERIVE_DH_SHA256;
+	else
+            master_derive = CKM_NSS_TLS_MASTER_KEY_DERIVE_SHA256;
+	key_derive = CKM_NSS_TLS_KEY_AND_MAC_DERIVE_SHA256;
         keyFlags = CKF_SIGN | CKF_VERIFY;
     } else if (isTLS) {
         if (isDH)
@@ -3342,16 +3340,9 @@ ssl3_ComputeMasterSecretInt(sslSocket *s
     master_params.RandomInfo.ulClientRandomLen = SSL3_RANDOM_LENGTH;
     master_params.RandomInfo.pServerRandom = ss->ssl3.hs.server_random;
     master_params.RandomInfo.ulServerRandomLen = SSL3_RANDOM_LENGTH;
-    if (isTLS12) {
-        master_params.prfHashMechanism = ssl3_GetPrfHashMechanism(ss);
-        master_params_len = sizeof(CK_TLS12_MASTER_KEY_DERIVE_PARAMS);
-    } else {
-        /* prfHashMechanism is not relevant with this PRF */
-        master_params_len = sizeof(CK_SSL3_MASTER_KEY_DERIVE_PARAMS);
-    }
 
     params.data = (unsigned char *)&master_params;
-    params.len = master_params_len;
+    params.len = sizeof master_params;
 
     return ssl3_ComputeMasterSecretFinish(ss, master_derive, key_derive,
                                           pms_version_ptr, &params,
@@ -3470,9 +3461,7 @@ ssl3_DeriveConnectionKeys(sslSocket *ss,
     PK11SymKey *derivedKeyHandle = NULL;
     void *pwArg = ss->pkcs11PinArg;
     int keySize;
-    CK_TLS12_KEY_MAT_PARAMS key_material_params; /* may be used as a
-                                                  * CK_SSL3_KEY_MAT_PARAMS */
-    unsigned int key_material_params_len;
+    CK_SSL3_KEY_MAT_PARAMS key_material_params;
     CK_SSL3_KEY_MAT_OUT returnedKeys;
     CK_MECHANISM_TYPE key_derive;
     CK_MECHANISM_TYPE bulk_mechanism;
@@ -3529,21 +3518,17 @@ ssl3_DeriveConnectionKeys(sslSocket *ss,
     calg = cipher_def->calg;
     bulk_mechanism = ssl3_Alg2Mech(calg);
 
+    params.data = (unsigned char *)&key_material_params;
+    params.len = sizeof(key_material_params);
+
     if (isTLS12) {
-        key_derive = CKM_TLS12_KEY_AND_MAC_DERIVE;
-        key_material_params.prfHashMechanism = ssl3_GetPrfHashMechanism(ss);
-        key_material_params_len = sizeof(CK_TLS12_KEY_MAT_PARAMS);
+	key_derive = CKM_NSS_TLS_KEY_AND_MAC_DERIVE_SHA256;
     } else if (isTLS) {
         key_derive = CKM_TLS_KEY_AND_MAC_DERIVE;
-        key_material_params_len = sizeof(CK_SSL3_KEY_MAT_PARAMS);
     } else {
         key_derive = CKM_SSL3_KEY_AND_MAC_DERIVE;
-        key_material_params_len = sizeof(CK_SSL3_KEY_MAT_PARAMS);
     }
 
-    params.data = (unsigned char *)&key_material_params;
-    params.len = key_material_params_len;
-
     /* CKM_SSL3_KEY_AND_MAC_DERIVE is defined to set ENCRYPT, DECRYPT, and
      * DERIVE by DEFAULT */
     derivedKeyHandle = PK11_Derive(masterSecret, key_derive, &params,
@@ -10634,39 +10619,16 @@ ssl3_ComputeTLSFinished(sslSocket *ss, s
                         const SSL3Hashes *hashes,
                         TLSFinished *tlsFinished)
 {
+    const char *label;
+    unsigned int len;
     SECStatus rv;
-    CK_TLS_MAC_PARAMS tls_mac_params;
-    SECItem param = { siBuffer, NULL, 0 };
-    PK11Context *prf_context;
-    unsigned int retLen;
 
-    PORT_Assert(spec->masterSecret);
-    if (!spec->masterSecret) {
-        PORT_SetError(SEC_ERROR_LIBRARY_FAILURE);
-        return SECFailure;
-    }
-
-    if (spec->version < SSL_LIBRARY_VERSION_TLS_1_2) {
-        tls_mac_params.prfMechanism = CKM_TLS_PRF;
-    } else {
-        tls_mac_params.prfMechanism = ssl3_GetPrfHashMechanism(ss);
-    }
-    tls_mac_params.ulMacLength = 12;
-    tls_mac_params.ulServerOrClient = isServer ? 1 : 2;
-    param.data = (unsigned char *)&tls_mac_params;
-    param.len = sizeof(tls_mac_params);
-    prf_context = PK11_CreateContextBySymKey(CKM_TLS_MAC, CKA_SIGN,
-                                             spec->masterSecret, &param);
-    if (!prf_context)
-        return SECFailure;
-
-    rv = PK11_DigestBegin(prf_context);
-    rv |= PK11_DigestOp(prf_context, hashes->u.raw, hashes->len);
-    rv |= PK11_DigestFinal(prf_context, tlsFinished->verify_data, &retLen,
-                           sizeof tlsFinished->verify_data);
-    PORT_Assert(rv != SECSuccess || retLen == sizeof tlsFinished->verify_data);
+    label = isServer ? "server finished" : "client finished";
+    len   = 15;
 
-    PK11_DestroyContext(prf_context, PR_TRUE);
+    rv = ssl3_TLSPRFWithMasterSecret(ss, spec, label, len, hashes->u.raw,
+	hashes->len, tlsFinished->verify_data,
+	sizeof tlsFinished->verify_data);
 
     return rv;
 }
